
1. STRINGS
	•	Pyhon doesn’t has a character data type, a single character is simply a string with length 1. 
	•	Immutable (can’t be change).
	•	Strings can be created by single quotes or double quotes or even triple quotes.
	•	Individual characters of a string can be accessed by using the method of Indexing.
	•	To access a range of characters in the string, method of Slicing is used.
	•	Indexing allows negative address references to access characters from the back of string, e.g. -1 refers to last character. 
	•	While accessing an index out of range will cause an IndexError.
	•	Only Integers are allowed to be passed as an index, float or other types will cause a TypeError.
	•	Updating or Deleting characters from a string is not allowed because it causes an error on item assignment or item deletion. 
	•	Updating and Deleting the entire string is possible because new strings can be reassigned to the same name and can be delete using inbuilt del keyword.
	•	While printing strings with single and double quotes in it causes SyntaxError.
	•	Use either Triple quotes (''') or Escape sequence (\) to print such things.
	•	To ignore the escape sequence in a string, r or R is used, this implies that the string is a raw string and escape sequences inside it are to be ignored.
	•	Strings in python can be formatted with the use of format () method which is very versatile and powerful tool for formatting of strings.
	•	Format method in String contains curly braces {} as placeholders which can hold arguments according to position or keyword to specify the order.
		o	String1 = "{} {} {}".format('Geeks', 'For', 'Life')
		o	String1 = "{1} {0} {2}".format('Geeks', 'For', 'Life') 
		o	String1 = "{l} {f} {g}".format(g = 'Geeks', f = 'For', l = 'Life') 
	•	A string can be left (<), right (>) or center (^) justified with the use of format specifiers, separated by colon (:).
		o	String1 = "|{:<10}|{:^10}|{:>10}|".format('Geeks','for','Geeks') 
	•	 Integers such as Binary, hexadecimal, etc. and floats can be rounded or displayed in the exponent form with the use of format specifiers.
		o	String1 = "{0:b}".format(16) 
		o	String1 = "{0:e}".format(165.6458) 
		o	String1 = "{0:.2f}".format(1/6) 
	•	Old style formatting was done without the use of format method by using % operator.
		o	print("Formatting in 3.2f format: ") 
		o	print('The value of Integer1 is %3.2f' %Integer1) 
		o	print("\nFormatting in 3.4f format: ") 
		o	print('The value of Integer1 is %3.4f' %Integer1) 


	string.ascii_letters		Concatenation of the ascii_lowercase and ascii_uppercase constants.
	string.ascii_lowercase		Concatenation of lowercase letters
	string.ascii_uppercase		Concatenation of uppercase letters
	string.digits				Digit in strings
	string.hexdigits			Hexadigit in strings
	string.letters				concatenation of the strings lowercase and uppercase
	string.lowercase			A string must contain lowercase letters.
	string.octdigits			Octadigit in a string
	string.punctuation			ASCII characters having punctuation characters.
	string.printable			String of characters which are printable
	String.endswith()			Returns True if a string ends with the given suffix otherwise returns False
	String.startswith()			Returns True if a string starts with the given prefix otherwise returns False
	String.isdigit()			Returns “True” if all characters in the string are digits, Otherwise, It returns “False”.
	String.isalpha()			Returns “True” if all characters in the string are alphabets, Otherwise, It returns “False”.
	string.isdecimal()			Returns true if all characters in a string are decimal.
	str.format()				one of the string formatting methods in Python3, which allows multiple substitutions and value formatting.
	String.index				Returns the position of the first occurrence of substring in a string
	string.uppercase			A string must contain uppercase letters.
	string.whitespace			A string containing all characters that are considered whitespace.
	string.swapcase()			Method converts all uppercase characters to lowercase and vice versa of the given string, and returns it
	replace()					returns a copy of the string where all occurrences of a substring is replaced with another substring.

	string.Isdecimal			Returns true if all characters in a string are decimal
	String.Isalnum				Returns true if all the characters in a given string are alphanumeric.
	string.Istitle				Returns True if the string is a titlecased string
	String.partition			splits the string at the first occurrence of the separator and returns a tuple.
	String.Isidentifier			Check whether a string is a valid identifier or not.
	String.len					Returns the length of the string.
	String.rindex				Returns the highest index of the substring inside the string if substring is found.
	String.Max					Returns the highest alphabetical character in a string.
	String.min					Returns the minimum alphabetical character in a string.
	String.splitlines			Returns a list of lines in the string.
	string.capitalize			Return a word with its first character capitalized.
	string.expandtabs			Expand tabs in a string replacing them by one or more spaces
	string.find					Return the lowest indexin a sub string.
	string.rfind				find the highest index.
	string.rindex				Raise ValueError when the substring is not found.
	string.count				Return the number of (non-overlapping) occurrences of substring sub in string
	string.lower				Return a copy of s, but with upper case letters converted to lower case.
	string.split				Return a list of the words of the string,If the optional second argument sep is absent or None
	string.rsplit()				Return a list of the words of the string s, scanning s from the end.
	rpartition()				Method splits the given string into three parts
	string.splitfields			Return a list of the words of the string when only used with two arguments.
	string.join					Concatenate a list or tuple of words with intervening occurrences of sep.
	string.strip()				It return a copy of the string with both leading and trailing characters removed
	string.lstrip				Return a copy of the string with leading characters removed.
	string.rstrip				Return a copy of the string with trailing characters removed.
	string.swapcase				Converts lower case letters to upper case and vice versa.
	string.translate			translate the characters using table
	string.upper				lower case letters converted to upper case.
	string.ljust				left-justify in a field of given width.
	string.rjust				Right-justify in a field of given width.
	string.center()				Center-justify in a field of given width.
	string-zfill				Pad a numeric string on the left with zero digits until the given width is reached.
	string.replace				Return a copy of string s with all occurrences of substring old replaced by new.

1.2	Interesting facts 
	•	Strings are immutable but we can update it as a = a + 'for' because interpreter makes a copy of the original string and then work on it and modifies it. So the expression a = a +’for’ doesn’t change string but reassigns the variable a to the new string generated by the result and drops down the previous string.
	•	Understand using id() function. id() function is used to return the identity of an object.
	•	string1 = "Hello" and string2 = "Hello” has same ids 
	•	where as string1 = "Hello" and string1 += "World" has different ids.
	•	String1 is modified which contradict the fact that strings are immutable, but the identity before and after modification are different.It means a new object of the string1 is created after modification which confirms the fact that strings are immutable as no change was made in previous object of string1 rather a new one is created. 
	•	To extract substring from the whole string then then we use the syntax like string_name[beginning: end : step]
 
 2. 
